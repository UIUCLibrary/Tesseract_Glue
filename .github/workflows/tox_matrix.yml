on: [push, pull_request]
name: Multi-platform Compatibility Test

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      tox_matrix: ${{ steps.dataStep.outputs.myoutput }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        name: Get tox environments
        with:
          cache: 'pip'
          python-version: '3.13'
      - id: dataStep
        run: |
          python -m pip install tox-uv
          echo "myoutput=$(uvx --quiet --with tox-uv tox list -d --no-desc | sed -E 's/(.*py)([0-9])([0-9]+)/\2.\3/' | jq  --raw-input . | jq -c --slurp)" >> $GITHUB_OUTPUT

  build:
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ${{ fromJson(needs.setup.outputs.tox_matrix) }}
      fail-fast: false
    name: Python ${{ matrix.python-version }} ${{ matrix.os }} build
    steps:
      - uses: actions/github-script@v6
        id: conan-path-script
        with:
          result-encoding: string
          script: |
            if ('${{matrix.os}}' === 'windows-latest'){
              return 'C:/Users/runneradmin'
            }
            if ('${{matrix.os}}' === 'ubuntu-latest'){
              return '/home/runner'
            }
            if ('${{matrix.os}}' === 'macos-latest'){
              return '/Users/runner'
            }
            return ''
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip' # caching pip dependencies
      - run: |
          pip install uv
      - uses: actions/cache@v3
        id: cache-conan
        with:
          path: "${{steps.conan-path-script.outputs.result}}/.conan2"
          key: ${{ runner.os }}${{ hashFiles('**/conanfile.py') }}
      - name: Prebuild Conan packages (Windows)
        if: |
          contains(matrix.os, 'windows') && steps.cache-conan.outputs.cache-hit != 'true'
        shell: cmd
        env:
          CONAN_USER_HOME: "${{steps.conan-path-script.outputs.result}}"
        run: |
          MD "%CONAN_USER_HOME%\.conan2\profiles"
          copy "ci\docker\windows\tox\conan\profile.ini" "%CONAN_USER_HOME%\.conan2\profiles\default"
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=amd64
          uv run --only-group conan --isolated conan profile detect --exist-ok
          uv run --only-group conan --isolated conan install . --build  missing -pr:b=default

      - name: Prebuild Conan packages
        env:
          CONAN_USER_HOME: "${{steps.conan-path-script.outputs.result}}"
        if: "!contains(matrix.os, 'windows') && steps.cache-conan.outputs.cache-hit != 'true'"
        run: |
          uv run --only-group conan --isolated conan profile detect --exist-ok
          uv run --only-group conan --isolated conan install . --build missing -pr:b=default
      - uses: actions/github-script@v7
        id: tox-env
        with:
          result-encoding: string
          script: |
            return "py${{matrix.python-version}}".replace('.','')
      - name: Run tox on Windows
        if: contains(matrix.os, 'windows')
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=amd64
          uv run --only-group tox --with tox-uv tox -e ${{ steps.tox-env.outputs.result }}
        env:
          CONAN_USER_HOME: "${{steps.conan-path-script.outputs.result}}"

      - name: Run tox on ${{ matrix.os }}
        if: "!contains(matrix.os, 'windows')"
        run: uv run --only-group tox --with tox-uv tox -e ${{ steps.tox-env.outputs.result }} -vvv
        env:
          CONAN_USER_HOME: "${{steps.conan-path-script.outputs.result}}"


