[build-system]
requires = [
    "setuptools>=77.0",
    'wheel',
    'conan>=2.0',
    'cmake<4.0',
    'uiucprescon.build @ https://github.com/UIUCLibrary/uiucprescon_build/releases/download/v0.2.6/uiucprescon_build-0.2.6-py3-none-any.whl'
]
build-backend = "uiucprescon.build"

[project]
name = "uiucprescon.ocr"
version = "0.1.5.dev0"
classifiers = [
    'Development Status :: 3 - Alpha',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Topic :: Software Development :: Libraries :: Python Modules',
]
readme = "README.rst"
requires-python = ">=3.9"
license = "NCSA"
license-files = ["LICENSE"]
description = "Image to text processing using Google Tesseract"
maintainers = [
    { name="Henry Borchers", email="hborcher@illinois.edu" }
]
authors = [
    {name="University Library at The University of Illinois at Urbana Champaign: Preservation Services", email="prescons@library.illinois.edu"}
]


[project.urls]
Documentation = "https://www.library.illinois.edu/dccdocs/ocr"
Download = "https://github.com/UIUCLibrary/ocr"

[tool.setuptools]
packages = [
    "uiucprescon.ocr"
]
include-package-data = false
zip-safe = false

[tool.setuptools.package-data]
"uiucprescon.ocr" = ["py.typed"]

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = [
    "tests"
 ]
addopts = "--verbose"
markers = [
    "integration"
]
norecursedirs = [
    "features",
    "build"
]
junit_logging = "all"
junit_log_passing_tests = true
junit_family="xunit2"
bdd_features_base_dir = "tests/features/"

[tool.coverage.run]
relative_files = true
branch = true

[tool.coverage.paths]
source = [
    "uiucprescon/"
]

[tool.coverage.report]
exclude_lines = [
    'raise NotImplementedError'
]

[tool.coverage.html]
directory = "reports/coverage"


[tool.pylint.MASTER]
init-hook="sys.path.append('.')"

[tool.cibuildwheel]
test-requires = "pytest"
test-command = "pytest {project}/tests"
manylinux-x86_64-image = "manylinux2014"
build-frontend = "build"
skip = [
    "cp36-*",
    "cp37-*",
    "cp38-*",
    "pp*",
    "*-win32",
    "*-musllinux*",
    "*-manylinux_i686"
]
build-verbosity = 1
environment-pass = ["CONAN_COMPILER_LIBCXX", "CONAN_COMPILER_VERSION", "CONAN_USER_HOME"]

[tool.cibuildwheel.windows]
before-all = [
    'pip install wheel',
    'pip install -r requirements-dev.txt',
    'conan profile new default --detect --force',
    'conan config init',
    'conan config set general.revisions_enabled=1',
    'conan install ./ --build missing',
]

[tool.cibuildwheel.macos]
before-all = [
    'uvx --with-requirements=requirements-dev.txt conan config init',
    'uvx --with-requirements=requirements-dev.txt conan config set general.revisions_enabled=1',
    'uvx --with-requirements=requirements-dev.txt conan profile update settings.compiler.version=$(cc -dumpfullversion -dumpversion | grep -oE  "^([0-9]+(\.)?)([0-9]+?)") default',
    'uvx --with-requirements=requirements-dev.txt conan install ./ --build missing --no-import'
]
repair-wheel-command = [
    "delocate-wheel --version",
    "delocate-listdeps {wheel}",
    "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}",
]


[tool.cibuildwheel.linux]
repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel}"
environment-pass = ["CONAN_USER_HOME", "CONAN_COMPILER_VERSION"]
before-all = [
    'pip3 install uv',
    'uvx --python 3.11 --with-requirements=requirements-dev.txt conan config init',
    'uvx --python 3.11 --with-requirements=requirements-dev.txt conan config set general.revisions_enabled=1',
    'uvx --python 3.11 --with-requirements=requirements-dev.txt conan profile update settings.compiler.version=$(cc -dumpfullversion -dumpversion | grep -oE  "^([0-9]+(\.)?)([0-9]+?)") default',
    'if [ -z \"$CONAN_COMPILER_LIBCXX\" ]; then : ; else uvx --python 3.11 --with-requirements=requirements-dev.txt conan profile update settings.compiler.libcxx=$CONAN_COMPILER_LIBCXX default; fi',
    "uvx --python 3.11 --with-requirements=requirements-dev.txt conan profile show default",
    "uvx --python 3.11 --with-requirements=requirements-dev.txt conan config get",
    "uvx --python 3.11 --with-requirements=requirements-dev.txt conan install ./ --build missing -pr:b=default --no-import",
]
[tool.cibuildwheel.linux.environment]
PYTHONFAULTHANDLER="True"
CONAN_COMPILER_LIBCXX="libstdc++11"
#
[localbuilder]
conanfile = 'conanfile.py'

[localbuilder.win32]
conan_options = ['tesseract:shared=True']

[tool.pylint]
extension-pkg-allow-list="uiucprescon.ocr.tesseractwrap"
